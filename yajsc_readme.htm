<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>YAJSC README</title>
<style type="text/css">
<!--
.style1 {
	font-size: 36px;
	font-weight: bold;
	color: #0000FF;
}
.style2 {
	color: #FF6600;
	font-weight: lighter;
	text-decoration: none;
	font-size: 12px;
}
.style3 {font-family: "幼圆"}
.KTYTLE {
	font-family: "黑体";
	font-size: 18px;
	font-weight: bolder;
	text-decoration: none;
}
.MCommon {
	font-size: 14px;
	text-decoration: none;
}
.style6 {
	color: #000099;
	font-size: 14px;
	text-decoration: none;
	font-style: italic;
}
.fc1 {
	font-family: "黑体";
	font-size: 16px;
	font-weight: bolder;
	color: #663399;
	text-decoration: none;
	border: thin none #3333FF;
	background-color: #FFFF00;
}
.style7 {color: #FF0000}
-->
</style>
</head>

<body>
<p align="center" class="style1">YAJSC README</p>
<p class="KTYTLE"><strong>整体架构:</strong></p>
<p><span class="style2">URL</span> --<strong class="fc1">Crawler</strong>--&gt; <span class="style2">html</span> --<strong class="fc1">Parser1</strong>--&gt; <span class="style2">javascript source</span> --<strong class="fc1">Scanner</strong>--&gt; <span class="style2">pure javascript source</span> --<strong class="fc1">Parser2</strong>--&gt; <span class="style2">AST(Abstract Syntax Tree)</span></p>
<p>--<strong class="fc1">Translation</strong>--&gt; <span class="style2">RPN code &amp; symbol table</span> --<strong class="fc1">Precompile</strong>--&gt;<span class="style2"> function name tree &amp; RPN code &amp; symbol table</span> --<strong class="fc1">Compiler</strong>--&gt; <span class="style2">final result</span></p>
<table width="945" height="103" border="1" align="center">
  <tr class="MCommon">
    <td width="84"><div align="center" class="style3">模块</div></td>
    <td width="579" align="center"><div align="center" class="style3">说明</div></td>
    <td width="260"><div align="center" class="style3">实现文件</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Crawler</div></td>
    <td align="center"><div align="center">抓取器</div></td>
    <td><div align="center">GetScript.java</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Parser1</div></td>
    <td align="center"><div align="center">自顶向下语法分析器,可以提出script块,以及各部tag属性</div></td>
    <td><div align="center">GetScript.java</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Scanner</div></td>
    <td align="center"><div align="center">扫描器,去除代码中的注释(包括html注释),去除多余的换行符</div></td>
    <td><div align="center">Main.cpp</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Parser2</div></td>
    <td align="center"><div align="center">自顶下向语法分析器,支持LL(k),带回朔</div></td>
    <td><div align="center">Main.cpp , boost::spirit</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Translation</div></td>
    <td align="center"><div align="center">代码翻译及目标代码生成,逆波兰翻译,同时产生运行地址对应表</div></td>
    <td><div align="center">Main.cpp</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Precompile</div></td>
    <td align="center"><div align="center">
        <p>前扫描,生成函数名树,作用:1,支持函数的向后跳转; 2,区分全局函数和局部函数和嵌套函数</p>
      </div></td>
    <td><div align="center">Compiler.cpp</div></td>
  </tr>
  <tr class="MCommon">
    <td><div align="center">Comiler</div></td>
    <td align="center"><div align="center">解释执行器,栈推结构</div></td>
    <td><div align="center">Compiler.cpp</div></td>
  </tr>
</table>
  <p><br>
  </p>
<p class="KTYTLE"><strong>代码结构:</strong></p>
<p class="MCommon">Common.hpp Common.cpp<br>
一些公用的函数和类</p>
<p class="MCommon">Error.hpp Error.cpp<br>
用于错误显示的TError</p>
<p class="MCommon">Heap.hpp Heap.cpp<br>
运行堆,结构为vector&lt;vector&gt;, 维护一个可用地址栈,根据引用计数将释放后的空间放入栈中,以达到空间重复利用的目的</p>
<p class="MCommon">SymbolTable.hpp SymbolTable.cpp<br>
符号表,兼用局部运行栈的作用,结构为map&lt;string,vector&gt;,vector为下推栈; 当某一符号退出当前环境时,由符号表负责弹出符号; 当退出全局函 数体内部时,由符号表负责将所有变量声明销毁</p>
<p class="MCommon">Yajsc.hpp Yajsc.cpp<br>
提供静态库接口</p>
<p class="MCommon">Simulation.hpp Simulation.cpp<br>
内建javascript核心对象,实现javascript自带全局函数</p>
<p class="MCommon">Main.hpp Main.cpp<br>
负责前扫描,内含javascript文法描述,根据语义动作建立地址映射和RPN代码</p>
<p class="MCommon">Compiler.hpp Compiler.cpp<br>
解释RPN代码,通过运行栈执行代码</p>
<p class="MCommon">libyajsc.hpp libyajsc.cpp<br>
  提供动态库接口 
</p>
<p class="MCommon">类名作用表:</p>
<table width="383" border="1">
  <tr class="MCommon">
    <td width="119" scope="col"><span class="style3">类名</span></td>
    <td width="248" scope="col"><span class="style3">作用</span></td>
  </tr>
  <tr class="MCommon">
    <td>MyScanner</td>
    <td>扫描器</td>
  </tr>
  <tr class="MCommon">
    <td>gram_g</td>
    <td>文法描述</td>
  </tr>
  <tr class="MCommon">
    <td>DoubleJumpList</td>
    <td>RPN翻译环境,包括回填地址链</td>
  </tr>
  <tr class="MCommon">
    <td>FNTreeNode</td>
    <td>函数名树节点</td>
  </tr>
  <tr class="MCommon">
    <td>FNTree</td>
    <td>函数名树</td>
  </tr>
  <tr class="MCommon">
    <td>Compiler</td>
    <td>编译执行器</td>
  </tr>
  <tr class="MCommon">
    <td>TItem</td>
    <td>符号表项</td>
  </tr>
  <tr class="MCommon">
    <td>IntValue</td>
    <td>中间代码项</td>
  </tr>
  <tr class="MCommon">
    <td>TError</td>
    <td>错误处理</td>
  </tr>
  <tr class="MCommon">
    <td>THeap</td>
    <td>运行期堆</td>
  </tr>
  <tr class="MCommon">
    <td>TSymbolTable</td>
    <td>运行期符号表</td>
  </tr>
  <tr class="MCommon">
    <td>TSimulation</td>
    <td>建立javascript核心对象及全局函数</td>
  </tr>
  <tr class="MCommon">
    <td>JSIInterface</td>
    <td>包装接口</td>
  </tr>
  <tr class="MCommon">
    <td>Yajsc</td>
    <td>静态库接口</td>
  </tr>
</table>
<p><br>
</p>
<p class="KTYTLE"><strong>javascript支持度:</strong></p>
<p class="MCommon">全局函数支持表:</p>
<table width="762" border="1">
  <tr class="MCommon">
    <td width="241" scope="col"><div align="center" class="style3">全支持(作用与js一样)</div></td>
    <td width="245" scope="col"><div align="center" class="style3">半支持(不影响页面效果,模拟js效果)</div></td>
    <td width="254" scope="col"><div align="center" class="style3">不支持(不影响页面效果,作用未实现)</div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">parseInt</div></td>
    <td width="245"><div align="left">escape</div></td>
    <td width="254"><div align="left">taint</div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">parseFloat</div></td>
    <td width="245"><div align="left">write</div></td>
    <td width="254"><div align="left">untaint</div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">String</div></td>
    <td width="245"><div align="left">registerCFunction</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">Number</div></td>
    <td width="245"><div align="left">getOptionValue</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">redirect</div></td>
    <td width="245"><div align="left">getOptionValueCount</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">flush</div></td>
    <td width="245"><div align="left">callC</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">addClient</div></td>
    <td width="245"><div align="left">ssjs_getClientID</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">deleteResponseHeader</div></td>
    <td width="245"><div align="left">blob</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">addResponseHeader</div></td>
    <td width="245"><div align="left">unescape</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">debug</div></td>
    <td width="245"><div align="left">Function</div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">ssjs_generateClientID</div></td>
    <td width="245"><div align="left"></div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">ssjs_getCGIVariable</div></td>
    <td width="245"><div align="left"></div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">isNaN</div></td>
    <td width="245"><div align="left"></div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
  <tr class="MCommon">
    <td width="241"><div align="left">Array</div></td>
    <td width="245"><div align="left"></div></td>
    <td width="254"><div align="left"></div></td>
  </tr>
</table>
<p class="MCommon">核心对象支持表:</p>
<table width="762" border="1">
  <tr class="MCommon">
    <td width="183" scope="col"><div align="center" class="style3">对象名</div></td>
    <td width="185" scope="col"><div align="center" class="style3">全支持</div></td>
    <td width="182" scope="col"><div align="center" class="style3">半支持</div></td>
    <td width="184" scope="col"><div align="center" class="style3">不支持</div></td>
  </tr>
  <tr class="MCommon">
    <td height="43">Math</td>
    <td>abs, max, min, pow, floor, ceil</td>
    <td><p>E, LN10, LN2, LOG10E, LOG2E, PI, SQRT1_2, random, cos, sin, tan, acos, asin, atan, atan2, exp, sqrt, log, round</p>      </td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="17">Object</td>
    <td>toString</td>
    <td>prototype</td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="17">Array</td>
    <td>length, join, push, pop, reverse</td>
    <td>shift,concat,slice,splice,sort,unshift</td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="69">Date</td>
    <td>getDate, getDay, getMonth,getYear, getMinutes, getSeconds, getTime, getHours, setDate, setHours, setMinutes, setMonth, setSeconds, setYear, setTime</td>
    <td>getFullYear, getTimezoneOffset, parse, setFullYear, toGMTString, toLocaleString</td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="56">String</td>
    <td>length, toLowerCase, toUpperCase, substring, substr, slice, split, search, match, replace, indexOf, lastindexOf, concat, charAt</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="17">RegExp</td>
    <td>compile, exec, test</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="17">Number</td>
    <td>MAX_VALUE, MIN_VALUE, NaN </td>
    <td>POSITIVE_INFINITY, NEGATIVE_INFINITY</td>
    <td>&nbsp;</td>
  </tr>
  <tr class="MCommon">
    <td height="17">Boolean</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p class="KTYTLE">&nbsp;</p>
<p class="KTYTLE"><br>
</p>
<p class="KTYTLE">JSI进程命令行调用格式:</p>
<p class="MCommon">./jsi.exe 目标文件名 URL(可选) -log(可选)</p>
<p class="MCommon">目标文件名: 目标js代码文件名, 同下面YAJSC调用接口说明里的filename<br>
URL: 可选,javascript所在页面的URL,该URL帮助javascript在解析过程中分析host,hostname,pathname<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://x.com/a.html#123 =&gt; host=x.com hostname=x.com pathname=/a.html <br>
-log:   可选,输出log文件在当前目录下,文件名为yajsc_log</p>
<p class="MCommon">例子:<br>
  ./jsi.exe a.js http://x.com/a.html#123 -log<br>
  ./jsi.exe a.js -log
</p>
<p class="MCommon">log格式:<br>
  总共处理过的js文件数量(int) 处理成功的js文件数量(int) 语法编译阶段发生错误的js文件数量(int) 代码执行阶段发生错误的js文件数量(int)</p>
<p class="MCommon">例子:<br>
90 83 2 5<br>
总共处理过90个js代码文件,其中83个被成功处理,2个文件存在着错误(或不支持)的js语法,5个文件编译后执行期出现错误</p>
<p class="MCommon">&nbsp;</p>
<p class="MCommon">&nbsp;</p>
<p class="KTYTLE"><strong>YAJSC调用接口说明:</strong></p>
<p class="MCommon">class Yajsc<br>
  {<br>
public:<br>
Yajsc(){};<br>
string Compile(const string&amp; filename,string addtional_code=&quot;&quot;);<br>
string Compile(istream&amp; ifs,string addtional_code=&quot;&quot;);<br>
};</p>
<p class="MCommon">调用说明:<br>
  <br>
  filename是存放着js代码的文件名<br>
  istream是存放着js代码的字节流<br>
  {<br>
  要求:<br>
  1, 包含的是javascript代码(大小写不区分!)<br>
  <br>
  2, 可以包含注释(注释内容由Scanner负责除去),js包含注释格式同java语言<br>
  <br>
  3, 可以包含html注释,包括&lt;!--和--&gt;,这两种注释字符串会在Scan过程被滤掉,而两个标志中间的代码保留<br>
}</p>
<p class="MCommon"><br>
  addtional_code是存放需要额外解释的代码<br>
  {<br>
  要求:<br>
  1, 该字符串是指除&lt;script&gt;&lt;/script&gt;标签外,额外需要解释的代码,比较重要的应用是当page onload中调用f(),可以把f()当<br>
  做addtional_code;<br>
  例子: onload=&quot;javascript::f()&quot; =&gt; addtional_code=&quot;f()&quot;<br>
  <br>
  2, addtional_code可以理解为增加程序的执行点,或者入口点,该代码不经过Scanner,所以绝对不能包含任何注释!!!<br>
  <br>
  3, addtional_code默认为空,其值建议由onload事件的调用方法决定<br>
  }</p>
<p class="MCommon"><span class="KTYTLE"><br>
  <br>
JSI动态库文件调用格式:</span></p>
<p class="MCommon">文件名 libyajsc.so(libyajsc.hpp libyajsc.cpp)<br>
    <br>
  调用函数:<br>
  extern &quot;C&quot; int yajsc_compile_string(const char* code,const char* addtional_code,char* buf, unsigned int buf_length);</p>
<p class="MCommon">extern &quot;C&quot; int yajsc_compile_string_withlog(const char* code,const char* addtional_code,<br>
  char* buf, unsigned int buf_length);</p>
<p class="MCommon">extern &quot;C&quot; int yajsc_compile_string_withurl(const char* code,const char* addtional_code,<br>
const char* url,char* buf,unsigned int buf_length);<br>
  <br>
  说明:<br>
  {<br>
  1, code是传入的javascript代码(以\0结束),要求同上面调用格式中的filename文件对应的内容的要求(可以包含注释等)<br>
  <br>
  2, addtional_code是额外解释的代码(以\0结束),要求同上面调用格式中的addtional_code的要求. 如果没有addtionalcode,可将其设为NULL<br>
  <br>
3, buf为返回的结果字符串的存放空间,返回的字符串以\0结束,buf_length为空间大小,如果需要返回的结果长度大于等于存放空间大小,则不对buf做任何变化,且返回0</p>
<p class="MCommon">4, url为被解释js所在页面的URL(以\0结束).<br>
  }</p>
<p><br>
  <br>
  <span class="KTYTLE">YAJSC返回值说明:</span></p>
<p><span class="MCommon">返回string反映该javascript所起的作用<br>
  {<br>
  作用:<br>
  1, JUMP 表明javascript跳转,包含下面几种情况:<br>
  &nbsp;&nbsp;&nbsp;a, 对于location系列对象进行左赋值,PS:所谓系列对象,指DOM树中location点和它的子节点<br>
  &nbsp;&nbsp;&nbsp;b, 对于location系列对象调用replace操作(reload除外)<br>
  &nbsp;&nbsp;&nbsp;c, 调用js全局函数redirect()<br>
&nbsp;&nbsp;&nbsp;d, 实现window对象的onload函数,在此函数中,调用上面四种情况</span></p>
<p><span class="MCommon">2, UNKNOWNJMP 表明javascript跳转,但是不确定其跳转的URL:<br>
  &nbsp;&nbsp;&nbsp;a, 跳转到未知的对象,情况包括1里面的各种情况<br>
  &nbsp;&nbsp;&nbsp;b,
  调用window对象函数setTimeout(),其中第一个参数中含有location字符串,PS:对于此类情况,url一律是&quot;unknown_site&quot;<br>
&nbsp;&nbsp;&nbsp;c, 注意此处是UNKNOWN<span class="style7">JMP</span>,不是JUMP<br>
  <br>
  3, POP 表明javascript弹出窗口(window),包含下面几种情况:<br>
&nbsp;&nbsp;&nbsp;a, 对于window系列对象调用open操作<br>
&nbsp;&nbsp;&nbsp;b, 对于未知对象调用open操作,且参数为字符串<br>
  <br>
  4, BAD 表明该javascript有恶意作用,包含下面几种情况:<br>
&nbsp;&nbsp;&nbsp;a, 跳转到同一字节代码地址大于8096次,判断为无限循环<br>
&nbsp;&nbsp;&nbsp;b, 连续在同一地址执行alert大于32次,判断为恶搞页面(未实现)</span></p>
<p class="MCommon">5, ALERT 表明该javascript启动时有弹出对话框(DialogBox),包含以下几种情况:<br>
&nbsp;&nbsp;&nbsp;a, 调用window对象的alert<br>
&nbsp;&nbsp;&nbsp;b, 调用window对象的confirm<br>
&nbsp;&nbsp;&nbsp;c, 调用window对象的prompt</p>
<p class="MCommon"><br>
  格式:<br>
  JUMP空格URL\n<br>
  UNKNOWNJMP空格URL\n<br>
  POP空格URL\n<br>
  BAD\n<br>
  ALERT空格\n</p>
<p class="MCommon"> 说明:<br>
  1, 所有URL未经相对地址到绝对地址的转换<br>
  2, 对于可以的跳转,如location=未知对象,URL设为unknownsite<br>
  3, 未知对象是指庞大的DOM树中所有未加以实现的对象<br>
  }<br><br>
  {<br>
  例子:</p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
  如1:<br>
&quot;</span><br>
  <span class="style6">var url=&quot;/index.jsp&quot;<br>
  with(location)<br>
  {<br>
  replace(url)<br>
  }<br>
  window.open(&quot;http://www.ad.com.cn/ad.htm&quot;)</span><br>
  <span class="MCommon">&quot;<br>
  输出:</span><br>
  <span class="style6">JUMP /index.jsp<br>
  POP http://www.ad.com.cn/ad.htm</span></p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
  如2:<br>
&quot;</span><br>
  <span class="style6">for(;;)<br>
  {<br>
  if(1==0)<br>
  break;<br>
  }</span><br>
  <span class="MCommon">&quot;<br>
  输出:</span><br>
  <span class="style6">BAD</span></p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
  如3:<br>
&quot;</span><br>
<span class="style6">alert(&quot;password error&quot;);</span><br>
<span class="MCommon">&quot;<br>
输出:</span><br>
<em><span class="style6" style="font-style: italic; font-size: 14px;" #invalid_attr_id="none">ALERT</span></em></p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
  如4:</span><br>
  &quot;<br>
  <em class="style6">setTimeout(&quot;document.location.href='news/index.asp'&quot;)</em><br>
  &quot;
  <br>
  <span class="MCommon">输出:</span><br>
  <span class="style6">UNKNOWNJMP</span></p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
  如5:<br>
  &quot;</span><br>
  <span class="style6">window.onload=f<br>
function f()<br>
{location=&quot;xxx.com&quot;} </span><br>
  <span class="MCommon">&quot;
  <br>
  输出:</span><br>
  <span class="style6">JUMP xxx.com</span></p>
<p><span class="MCommon">-----------------------------------------------------------------------------------<br>
  如6:<br>
&quot;</span><br>
<span class="style6">var c=0;
<br>
  function window.onload()<br>
  {<br>
  location=&quot;xxx.com&quot;<br>
  }</span><br>
  <span class="MCommon">&quot;<br>
  输出:</span><br>
  <span class="style6">JUMP xxx.com</span></p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
  如7:(URL: http://gb3764.sme.cn/cms/redirect.jsp;jsessionid=76DEE4E313F365C403C07E80C999CB80)</span><br>
  <span class="MCommon">&quot;</span><br>
  <span class="style6">host = window.location.host;<br>
var re, href,my;<br>
re = new RegExp(&quot;\\.&quot;,&quot;i&quot;);<br>
var replace=&quot;\.my\.&quot;;<br>
href=host.replace(re,replace);<br>
location.href=&quot;http://&quot;+href;</span><br>
  <span class="MCommon">&quot; <br>
  输出:</span><br>
  <span class="style6">JUMP http://gb3764.my.sme.cn</span></p>
<p><span class="MCommon">----------------------------------------------------------------------------------<br>
</span>}</p>
<hr>
<p align="center" class="style2">Frist edited @ Oct 23 2006, Updated @ Apr 24 2007, by kobe </p>
<p>&nbsp;</p>
</body>
</html>
